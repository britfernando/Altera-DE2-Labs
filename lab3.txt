Part 1:
1) The output Q will be 0.
2) The output Q will still be 0, retaining the previous value.
3) The output Q will still be 0, retaining the previous value.
4) The value would be 1 for Q, as the previous values would be reset.
5) The value for Q would be 1, same as before.

Part 2:
D latch flip flop truth table:
SET RESET D CK Q Q`
0   1     - -  1 0
1   0     - -  0 1
0   0     - -  1 1
1   1     1 H  1 0 
1   1     0 H  0 1

module part2 (Clk, R, S, Q);
	input Clk R, S;
	output Q;

	wire R_g, S_g, Qa, Qb /*synthesis keep */ ;
	
	assign R_g = R & Clk;
	assign S_g = S & Clk;
	assign Qa = ~(R_g | Qb);
	assign Qb = ~(S_g | Qa);

	assign Q = Qa;
endmodule

Part 3:
1) 74LS00/03, and 74LS04/05
2)
Pinouts for NAND:
1: S
2: Clk in
3: S_g
4: Clk in
5: R
6: R_g
13: S_g
12: Qb (from pin 8)
11: Qa  
10: R_g
9: Qa (from pin 11)
8: Qb


Part 4:
1) 
module part4 (D, Clk, Q);
	input Clk R, S;
	output Q;

	wire S, R, R_g, S_g, Qa, Qb /*synthesis keep */ ;
	
	assign R = ~D;
	assign R_g = ~(R & Clk);
	assign S_g = ~(S & Clk);
	assign Qa = ~(S_g & Qb);
	assign Qb = ~(R_g & Qa);

	assign Q = Qa;
endmodule

3)
module part4 (SW, LEDR);
	input [1:0]SW;
	output [0]LEDR;
	assign D = SW[0];
	assign Clk = SW[1];
	wire S, R, R_g, S_g, Qa, Qb /*synthesis keep */ ;
	
	assign R = ~D;
	assign R_g = ~(R & Clk);
	assign S_g = ~(S & Clk);
	assign Qa = ~(S_g & Qb);
	assign Qb = ~(R_g & Qa);

	assign Q = Qa;
	assign LEDR[0] = Q;
endmodule

Part 5:

module part4 (SW, LEDR);
	input [1:0]SW;
	output [0]LEDR;
	assign D = SW[0];
	assign Clk = SW[1];
	wire Q, S, R, R_g, S_g, Qa, Qb /*synthesis keep */ ;
	
	assign R = ~D;
	assign R_g = ~(R & Clk);
	assign S_g = ~(S & Clk);
	assign Qa = ~(S_g & Qb);
	assign Qb = ~(R_g & Qa);
	
	slave S0 (Qa, Qb, Q);
	assign LEDR[0] = Q;
endmodule

module slave(D, Clk, Q);
	input Qa, Qb;
	output Q;
	wire Q, S, R, R_g, S_g, Qa, Qb /*synthesis keep */ ;

	assign R = ~D;
	assign R_g = ~(R & Clk);
	assign S_g = ~(S & Clk);
	assign Qa = ~(S_g & Qb);
	assign Qb = ~(R_g & Qa);
	
	assign Q = Qa;
endmodule;

Part 6:
module D_latch(D, Clk, Q);
	input D, Clk;
	output reg Qa;

	always @ (D, Clk);	
		if (Clk) begin
			Qa = D;
		end
endmodule

module flip_flop_latches(D, Clk, Q);
	input D, Clk;
	output reg Q;
	
	wire Q_m;
	
	D_latch positive (D, Clk, Q_m);
	D_latch negative (Q_m, ~Clk, Q);
endmodule 

Part 7:
module part7 (SW, KEY, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7);
	input [15:0]SW;
	input [1:0]KEY;
	output [6:0]HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;
	
	wire[15:0] Q, Q_p;
	
	flip_flip_latches(SW[0], ~KEY[1], KEY[0], Q[0]);
	flip_flip_latches(SW[1], ~KEY[1], KEY[0], Q[1]);
	flip_flip_latches(SW[2], ~KEY[1], KEY[0], Q[2]);
	flip_flip_latches(SW[3], ~KEY[1], KEY[0], Q[3]);
	flip_flip_latches(SW[4], ~KEY[1], KEY[0], Q[4]);
	flip_flip_latches(SW[5], ~KEY[1], KEY[0], Q[5]);
	flip_flip_latches(SW[6], ~KEY[1], KEY[0], Q[6]);
	flip_flip_latches(SW[7], ~KEY[1], KEY[0], Q[7]);
	flip_flip_latches(SW[8], ~KEY[1], KEY[0], Q[8]);
	flip_flip_latches(SW[9], ~KEY[1], KEY[0], Q[9]);
	flip_flip_latches(SW[10], ~KEY[1], KEY[0], Q[10]);
	flip_flip_latches(SW[11], ~KEY[1], KEY[0], Q[11]);
	flip_flip_latches(SW[12], ~KEY[1], KEY[0], Q[12]);
	flip_flip_latches(SW[13], ~KEY[1], KEY[0], Q[13]);
	flip_flip_latches(SW[14], ~KEY[1], KEY[0], Q[14]);
	flip_flip_latches(SW[15], ~KEY[1], KEY[0], Q[15]);

	Q_p = Q;

	char_7seg d0 (SW[3:0], HEX0);
	char_7seg d1 (SW[7:4], HEX1);
  	char_7seg d2 (SW[11:8], HEX2);
  	char_7seg d3 (SW[15:12], HEX3);
  	char_7seg d4 (Q_p[3:0], HEX4);
  	char_7seg d5 (Q_p[7:4], HEX5);
  	char_7seg d6 (Q_p[11:8], HEX6);
  	char_7seg d7 (Q_p[15:12], HEX7);

module D_latch(D, Clk, Res, Q);
	input D, Clk, Res;
	output reg Qa;

	always @ (D, Clk);	
		if (Clk) begin
			Qa = D;
		end else if (Res) begin
			Qa = 0;
		end
		
endmodule

module flip_flop_latches(D, Clk, Q, Res);
	input D, Clk, Res;
	output reg Q;
	
	wire Q_m;
	
	D_latch positive (D, Clk, Res, Q_m);
	D_latch negative (Q_m, ~Clk, Res, Q);
endmodule
	
	

module char_7seg(in, out);
	output reg [6:0] out;
	input [3:0] in;
	always @(in)
		case (in)
			4'h0: out = 7'b0111111;
			4'h1: out = 7'b0000110;
			4'h2: out = 7'b1011011;
			4'h3: out = 7'b1001111;
			4'h4: out = 7'b1100110;
			4'h5: out = 7'b1101101;
			4'h6: out = 7'b1111101;
			4'h7: out = 7'b0000111;
			4'h8: out = 7'b1111111;
			4'h9: out = 7'b1100111;
			4'hA: out = 7'b1110111;
			4'hB: out = 7'b1111100;
			4'hC: out = 7'b0111001;
			4'hD: out = 7'b1011110;
			4'hE: out = 7'b1111001;
			4'hF: out = 7'b1110001;
			default: out = 7'b1111001;
		endcase
endmodule



 