Part 1: 

Full adder pinouts

16: VCC
15: B3 IN
14: A3 IN
13: S3 Out
12: A4 IN
11: B4 IN
10: S4 OUT
9: C OUT
8: Ground
7: C IN
6: B1 IN
5: A1 IN
4: S1 OUT
3: A2 IN
2: B2 IN
1: S2 OUT



Part 2:

module part2 (SW, LEDG, LEDR);
  	input [8:0] SW;
  	output [8:0] LEDR;
	output [8] LEDG;

 	assign LEDR[8:0] = SW[8:0];

	wire c1, c2, c3;

  	fulladder A0 (SW[0], SW[4], SW[8], LEDG[0], c1);
  	fulladder A1 (SW[1], SW[5], c1, LEDG[1], c2);
  	fulladder A2 (SW[2], SW[6], c2, LEDG[2], c3);
  	fulladder A3 (SW[3], SW[7], c3, LEDG[3], LEDG[4]);
endmodule

module fulladder (a, b, ci, s, co);
  	input a, b, ci;
	output co, s;

  	wire d;

	assign d = a ^ b;
	assign s = d ^ ci;
	assign co = (b & ~d) | (d & ci);
endmodule

Part 3:

module part3 (SW, HEX0, HEX1);
  	input [3:0] SW;
	output [0:6] HEX0, HEX1;

  	wire z;
  	wire [3:0] M, A;
  	assign A[3] = 0;

  	comparator C0 (SW[3:0], z);
  	circuitA AA (SW[2:0], A[2:0]);
  	mux_4bit_2to1 MU (z, SW[3:0], A, M);
  	circuitB BB (z, HEX1);
  	char_7seg S0 (M, HEX0);
endmodule

module char_7seg (C, DISPLAY);
  	input [3:0] C;
	output [0:6] DISPLAY;

	assign DISPLAY[0] = ((~X[3] & ~X[2] & ~X[1] &  X[0]) | (~X[3] &  X[2] & ~X[1] & ~X[0]));
	assign DISPLAY[1] = ((~X[3] &  X[2] & ~X[1] &  X[0]) | (~X[3] &  X[2] &  X[1] & ~X[0]));
  	assign DISPLAY[2] =  (~X[3] & ~X[2] &  X[1] & ~X[0]);
  	assign DISPLAY[3] = ((~X[3] & ~X[2] & ~X[1] &  X[0]) | (~X[3] &  X[2] & ~X[1] & ~X[0]) | (~X[3] &  X[2] & X[1] & X[0]) | (X[3] & ~X[2] & ~X[1] & X[0]));
  	assign DISPLAY[4] = ~((~X[2] & ~X[0]) | (X[1] & ~X[0]));
  	assign DISPLAY[5] = ((~X[3] & ~X[2] & ~X[1] &  X[0]) | (~X[3] & ~X[2] &  X[1] & ~X[0]) | (~X[3] & ~X[2] & X[1] & X[0]) | (~X[3] & X[2] & X[1] & X[0]));
  	assign DISPLAY[6] = ((~X[3] & ~X[2] & ~X[1] &  X[0]) | (~X[3] & ~X[2] & ~X[1] & ~X[0]) | (~X[3] &  X[2] & X[1] & X[0]));
endmodule

module comparator (VV, z);
  	input [3:0] VV;
  	output z;

  	assign z = ((VV[2] | VV[1]) & VV[3]);
endmodule

module circuitA (V, A);
  	input [2:0] V;
  	output [2:0] A;

  	assign A[0] = V[0];
  	assign A[1] = ~V[1];
  	assign A[2] = (V[2] & V[1]);
endmodule

module circuitB (z, DISPLAY);
  	input z;
  	output [0:6] DISPLAY;

  	assign DISPLAY[0] = z;
  	assign DISPLAY[1:2] = 2'b00;
  	assign DISPLAY[3:5] = {3{z}};
  	assign DISPLAY[6] = 1;
endmodule

module mux_4bit_2to1 (s, U, V, M);
  	input s;
  	input [3:0] U, V;
  	output [3:0] M;

  	assign M = ({4{~s}} & U) | ({4{s}} & V);
endmodule

Part 4:

part 4(SW, LEDR, LEDG, HEX0, HEX1);

	input [7:0] SW;
	output [7:0] LEDR;
	output [8] LEDG;
	output [6:0] HEX1, HEX0;

	wire cmp1, cmp2;
	wire c1, c2, c3;
	wire [3:0] S;
	comparator1 CMP0 (SW[3:0], cmp1)
	comparator1 CMP01 (SW[7:4], cmp2)

	assign LEDR[7:0] = SW[7:0]
	assign LEDG[8] = (cmp1 | cmp2)

	fulladder A0 (SW[0], SW[4], SW[8], S[0], c1);
	fulladder A1 (SW[1], SW[5], c1, S[1], c2);
  	fulladder A2 (SW[2], SW[6], c2, S[2], c3);
  	fulladder A3 (SW[3], SW[7], c3, S[3], S[4]);
	
	comparator2 CMP002 (S, z);
	circuitA AA (S[3:0], A);
	circuitB BB (z, HEX1);
	mux_4bit_2to1 MU (z, S[3:0], A, M);
	char_7seg(M, HEX0);
 
module mux_4bit_2to1 (s, U, V, M);
  	input s;
  	input [3:0] U, V;
  	output [3:0] M;

  	assign M = ({4{~s}} & U) | ({4{s}} & V);
endmodule

module circuitA (V, A);
  	input [2:0] V;
  	output [2:0] A;

  	assign A[0] = V[0];
  	assign A[1] = ~V[1];
  	assign A[2] = (V[2] & V[1]);
endmodule

module circuitB (z, DISPLAY);
  	input z;
  	output [0:6] DISPLAY;

  	assign DISPLAY[0] = z;
  	assign DISPLAY[1:2] = 2'b00;
  	assign DISPLAY[3:5] = {3{z}};
  	assign DISPLAY[6] = 1;
endmodule

module comparator1 (V, z);
  	input [3:0] V;
  	output z;

  	assign z = (V[3] & (V[2] | V[1]));
endmodule

module char_7seg (C, DISPLAY);
  	input [3:0] C;
	output [0:6] DISPLAY;

	assign DISPLAY[0] = ((~X[3] & ~X[2] & ~X[1] &  X[0]) | (~X[3] &  X[2] & ~X[1] & ~X[0]));
	assign DISPLAY[1] = ((~X[3] &  X[2] & ~X[1] &  X[0]) | (~X[3] &  X[2] &  X[1] & ~X[0]));
  	assign DISPLAY[2] =  (~X[3] & ~X[2] &  X[1] & ~X[0]);
  	assign DISPLAY[3] = ((~X[3] & ~X[2] & ~X[1] &  X[0]) | (~X[3] &  X[2] & ~X[1] & ~X[0]) | (~X[3] &  X[2] & X[1] & X[0]) | (X[3] & ~X[2] & ~X[1] & X[0]));
  	assign DISPLAY[4] = ~((~X[2] & ~X[0]) | (X[1] & ~X[0]));
  	assign DISPLAY[5] = ((~X[3] & ~X[2] & ~X[1] &  X[0]) | (~X[3] & ~X[2] &  X[1] & ~X[0]) | (~X[3] & ~X[2] & X[1] & X[0]) | (~X[3] & X[2] & X[1] & X[0]));
  	assign DISPLAY[6] = ((~X[3] & ~X[2] & ~X[1] &  X[0]) | (~X[3] & ~X[2] & ~X[1] & ~X[0]) | (~X[3] &  X[2] & X[1] & X[0]));
endmodule

module comparator2 (V, z);
  	input [4:0] V;
  	output z;

  	assign z = V[4] | ((V[3] & V[2]) | (V[3] & V[1]));
endmodule


module fulladder (a, b, ci, s, co);
  	input a, b, ci;
	output co, s;

  	wire d;

	assign d = a ^ b;
	assign s = d ^ ci;
	assign co = (b & ~d) | (d & ci);
endmodule


Part 5:

part5 (SW, LEDR, HEX0, HEX1, HEX2);

	input [15:0]SW;
	output [15:0] LEDR;
	output [6:0] HEX2, HEX1, HEX0;

	assign LEDR[15:0] = SW[15:0]
	
	wire [4:0] T1, T0;
	wire [3:0] Z1, Z0, S2, S1, S0;
	
	always begin
	    	T0 = SW[3:0] + SW[11:8];
    		if (T0 > 9) begin
      			Z0 = 10;
      			c1 = 1;
    	end else begin
      		Z0 = 0;
      		c1 = 0;
    	end
    	
		S0 = T0 - Z0;

	    	T1 = SW[7:4] + SW[15:12] + c1;
    		if (T1 > 9) begin
      			Z1 = 10;
      			c2 = 1;
    	end else begin
      		Z1 = 0;
      		c2 = 0;
    	end
    		S1 = T1 - Z1;
		S2 = c2;
	end

	
endmodule






















